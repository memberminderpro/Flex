<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:grids="com.flexicious.grids.*" 
	xmlns:columns="com.flexicious.grids.columns.*" 
	xmlns:mate="http://mate.asfusion.com/" 
	width="100%" creationComplete="onCreationComplete()">
	<!--Support for the Server Grid. We're using MATE's mock framework here to make a self contained project,
	but ideally this would be a remote object or http or webservice-->
	<mate:MockRemoteObject id="mockRemoteObject" mockGenerator="{EmployeeGenerator}" delay="1" showBusyCursor="true" result="onEmployeesResult(event)">
		<mate:MockMethod name="getEmployees"/>
	</mate:MockRemoteObject>

	<mx:Script>
		<![CDATA[
			import com.flexicious.controls.Spinner;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import com.sample.examples.support.SalaryRangeSlider;
			import com.sample.model.EmployeeGenerator;
			import com.sample.model.Employee;
			import com.flexicious.utils.DateRange;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			import com.flexicious.grids.filters.Filter;
			import com.flexicious.grids.events.FilterPageSortChangeEvent;
			import com.flexicious.grids.filters.FilterExpression;
			import com.sample.SampleUIUtils;

			[Bindable()]
			private var _totalRecords:int;
			//fire off the server call on initial load
			private function onCreationComplete():void {
				//for the grid bound to the server, 
				//just get the first page of employees
				var filter:Filter=new Filter();
				filter.pageSize=dgEmployeesServer.pageSize;
				filter.pageIndex=0;
				//just get the first page initially...
				mockRemoteObject.getOperation("getEmployees").send(filter, null, null);
				
			}
			//This event is fired when the user changes the sort, page or filter 
			private function onFilterPageSortChange(event:FilterPageSortChangeEvent):void
			{
				//since we're mocking the service layer here, we are just sending it the client 
				//filter object that knows how to filter itself.
				//The actual call should be sending either something like the MyFilter object
				//included in the sample project, or the filter criteria via a formatted string.
				
				for each(var filterExpression:FilterExpression in event.filter.arguments){
					var columnToSearchFor:String = filterExpression.columnName;
					//this could be array for multi select or date range, or single text value for text input
					var valueToSearch:Object = filterExpression.expression;
					trace("Searching " + columnToSearchFor + " with value " + valueToSearch);
				}
				
				//send service request with updated filter
				var filter:Filter = event.filter;
				mockRemoteObject.getOperation("getEmployees").send(filter, null, null);
			}
			//Function to call when server call returns.
			private function onEmployeesResult(event:ResultEvent):void
			{
				//the dummy service just sends back the page to display, and the total records.
				//what you send back from your service will need to reflect in the below
				//two lines of code.
				dgEmployeesServer.totalRecords=event.result.recordCount;
				dgEmployeesServer.dataProvider=event.result.records as ArrayCollection;
				_totalRecords = event.result.recordCount;
				dgEmployeesServer.footerRow.redrawFooter();
			}
			// Callback function that highlights in red 
	          // all rows for >75,000
	          public function myStyleFunc(data:Object, 
	            col:AdvancedDataGridColumn):Object
	          {
	             if (data["annualSalary"] > 75000) 
	                return {color:0xFF0000}; 
	             return null;      
	          }
		]]>
	</mx:Script>
	
	
	<mx:HBox width="100%">
		<mx:Label text="# Selected Ids: {dgEmployeesServer.selectedKeys.length}"/>
		<mx:Spacer width="100%"/>
		<mx:Button label="View Explanation For Example" click="UIUtils.openBrowserPopup('http://www.flexicious.com/Home/AdvancedFlexDataGridPagingFilterServer',
		'width=1024,height=768,lef t=0,top=0, toolbar=No,location=No,scrollbars=Yes,status=No,resizable=No,fullscreen=No')"/>
	</mx:HBox>
	
	<!--Datagrid with filterPageSortMode = server (Only the first page is loaded from the server (see onCreationCompelete. 
	The grid then fires filterPageSortChange when the user requests another page or sort or filter. 
	This is then handled by the server call and data is bound on server call return. See onFilterPageSortChange))-->
	<mx:TextArea width="100%" text="This example shows a simple grid bound to the server, where only the first page is loaded by default. Later calls to sort, page and filter trigger server round trips.(filterPageSortMode = server)"/>
	<grids:ExtendedAdvancedDataGrid  enableFilters="true" enableCopy="true" enableFooters="true" enablePaging="true" id="dgEmployeesServer"
		 height="271" pagerPosition="bottomMiddle" pageSize="20" filterPageSortMode="server" enablePreferencePersistence="true" preferencePersistenceKey="advancedServerGrid" 
		 pagerRenderer="com.sample.examples.support.CustomPagerControl" filterPageSortChange="onFilterPageSortChange(event)" width="100%"
		 filterRowHeight="30" styleFunction="myStyleFunc">
		<grids:groupedColumns>
			<columns:SelectAllAdvancedCheckBoxHeaderColumn width="15" selectedKeyField="employeeId"/>
			<columns:ExtendedAdvancedDataGridColumn headerText="ID" dataField="employeeId" filterOperation="Contains" filterControl="TextInput"/>
			<mx:AdvancedDataGridColumnGroup headerText="Name">   
				<columns:ExtendedAdvancedDataGridColumn headerText="First Name" dataField="firstName" filterOperation="BeginsWith" filterControl="TextInput"/>
				<columns:ExtendedAdvancedDataGridColumn headerText="Last Name" dataField="lastName" filterOperation="BeginsWith" filterControl="TextInput"/>
			</mx:AdvancedDataGridColumnGroup>   
			
			<columns:ExtendedAdvancedDataGridColumn headerText="Department" dataField="department" filterOperation="Equals" filterControl="MultiSelectComboBox" filterComboBoxBuildFromGrid="true" filterComboBoxWidth="150"/>
			<columns:ExtendedAdvancedDataGridColumn headerText="Phone" dataField="phoneNumber" filterOperation="Contains" filterControl="TextInput"/>
			<columns:ExtendedAdvancedDataGridColumn headerText="Active" dataField="isActive" filterOperation="Equals" filterControl="TriStateCheckBox"/>
			<columns:ExtendedAdvancedDataGridColumn headerText="Hire Date" dataField="hireDate" filterControl="DateComboBox" labelFunction="SampleUIUtils.dataGridFormatDate" filterDateRangeOptions="{[DateRange.DATE_RANGE_THISQUARTER,DateRange.DATE_RANGE_LASTQUARTER,DateRange.DATE_RANGE_THISYEAR,DateRange.DATE_RANGE_LASTYEAR,DateRange.DATE_RANGE_CUSTOM]}" filterComboBoxWidth="150" 
				footerLabel="Count: {_totalRecords}" />
			<columns:ExtendedAdvancedDataGridColumn textAlign="right" labelFunction="SampleUIUtils.dataGridFormatCurrency" width="100" headerText="Annual Salary" dataField="annualSalary" footerOperation="average" footerLabel="Avg:" footerFormatter="{SampleUIUtils.currencyFormatterWithCents}" filterControl="NumericRangeBox"/>
		</grids:groupedColumns>
	</grids:ExtendedAdvancedDataGrid>
</mx:VBox>
