<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" title="Journal Entry" fontSize="12" 
	creationComplete="popUpInit()" creationPolicy="all" close="closeEvent(event)" showCloseButton="true" 
	borderAlpha="1" borderColor="#A8E6E7" width="860" height="431" layout="absolute" backgroundColor="#F2F2F8">
   <mx:states>
      <mx:State name="StateLocked">
         <mx:SetProperty target="{txtDescription}" name="editable" value="false"/>
         <mx:SetProperty target="{txtDescription}" name="toolTip" value="{CommonStrings.notEditableMessage}"/>
         <mx:SetProperty target="{txtMemo}" name="editable" value="false"/>
         <mx:SetProperty target="{txtMemo}" name="toolTip" value="{CommonStrings.notEditableMessage}"/>
         <mx:RemoveChild target="{btnAdd}"/>
         <mx:RemoveChild target="{btnDelete}"/>
         <mx:SetProperty target="{cbEntity}" name="editable" value="false"/>
         <mx:SetProperty target="{cbEntity}" name="toolTip" value="{CommonStrings.notEditableMessage}"/>
         <mx:SetProperty target="{dgSplitItems}" name="toolTip" value="{CommonStrings.notEditableMessage}"/>
         <mx:SetProperty target="{dgSplitItems}" name="editable" value="false"/>
         <mx:RemoveChild target="{btnSave}"/>
         <mx:SetProperty target="{button1}" name="label" value="Close Window"/>
         <mx:SetProperty target="{dRegDate}" name="editable" value="false"/>
         <mx:SetProperty target="{dRegDate}" name="toolTip" value="{CommonStrings.notEditableMessage}"/>
         <mx:SetProperty target="{dDueDate}" name="editable" value="false"/>
         <mx:SetProperty target="{dDueDate}" name="toolTip" value="{CommonStrings.notEditableMessage}"/>
         <mx:SetProperty target="{txtRefnum}" name="editable" value="false"/>
         <mx:SetProperty target="{txtRefnum}" name="toolTip" value="{CommonStrings.notEditableMessage}"/>
         <mx:SetProperty target="{chkBxProforma}" name="toolTip" value="{CommonStrings.notEditableMessage}"/>
         <mx:SetProperty target="{selDebit}" name="toolTip" value="{CommonStrings.notEditableMessage}"/>
         <mx:SetProperty target="{selCredit}" name="toolTip" value="{CommonStrings.notEditableMessage}"/>
         <mx:SetProperty target="{selCredit}" name="enabled" value="false"/>
         <mx:SetProperty target="{selDebit}" name="enabled" value="false"/>
         <mx:SetProperty target="{chkBxProforma}" name="enabled" value="false"/>
         <mx:SetEventHandler target="{chkBxProforma}" name="click"/>
         <mx:SetEventHandler target="{dgSplitItems}" name="itemEditBeginning"/>
         <mx:SetEventHandler target="{dgSplitItems}" name="itemClick"/>
         <mx:SetEventHandler target="{dgSplitItems}" name="change"/>
         <mx:SetProperty name="title" value="Journal Entry (Locked)"/>
         <mx:SetProperty name="titleIcon" value="@Embed(source='../assets/images/lock.png')"/>
         <mx:AddChild position="lastChild">
            <mx:Text x="452" y="39" width="308.95" height="30" fontSize="10" id="text1">
               <mx:text><![CDATA[Note: This record is locked and cannot be edited because it applies to a previous fiscal year.
]]></mx:text>
            </mx:Text>
         </mx:AddChild>
         <mx:SetEventHandler target="{cbEntity}" name="change"/>
         <mx:SetEventHandler target="{dDueDate}" name="change"/>
         <mx:SetEventHandler target="{dRegDate}" name="change"/>
         <mx:SetEventHandler target="{txtMemo}" name="valueCommit"/>
      </mx:State>
   </mx:states>

   <mx:RemoteObject 
   	id="registerItemCFC"
   	showBusyCursor="true"
   	destination="ColdFusion"
   	result="registerItemCFCHandler(event)"
   	fault="CFCerror(event)"/> 
		
<mx:Script>
	<![CDATA[
		import com.infusion.accounting.utils.CommonStrings;

//Import all the Misc BS FLEX requires    	
		import mx.events.ListEvent;
		import mx.events.DataGridEvent; 
    	import mx.events.*;
		import mx.events.NumericStepperEvent;
		import mx.controls.Alert;
		import mx.rpc.events.ResultEvent;
    	import mx.rpc.events.FaultEvent;
    	import mx.rpc.AsyncToken;
		import mx.collections.ArrayCollection;
		import mx.collections.XMLListCollection;
		import mx.formatters.CurrencyFormatter;
		import mx.events.DropdownEvent;
		
		import mx.managers.PopUpManager;
    	import mx.messaging.messages.RemotingMessage;
    	import com.adobe.serialization.json.JSON;

//Import this application modules         
		import accounts.Register;
		import accounts.RegisterDAO;
		
		import accounts.RegisterItem;
		import accounts.RegisterItemDAO;
		
// Set by Account.mxml		
		public var r_Class:RegisterDAO;						// This is the register selected		
		public var accts:XML;								// List of Accounts
		public var fEdit:Boolean;							// New or Update
    	public var dir:String;
    	public var dsn:String;
    	public var endPoint:String;
    	public var duesAccount:Number = 0;
    	public var isCash:String = "N";
    	public var Today:Date;
    	[Bindable]
    	public var sEntity:String;							// Member/Entity Name
    	[Bindable]
        private var _members:Array;
	    [Bindable]
        private var _xmlListMembers:XMLListCollection;

// Set Herein

		private var amtType:String;
		private var fCredit:Boolean;

// Referenced on Split PopUp 
		[Bindable]
		private var refNum:String;
		[Bindable]
		private var acctDescript:String;
		[Bindable]
		private var acctMemo:String;
		[Bindable]
		public  var boolProforma:Boolean;
		[Bindable]
		private var arSplitItems:ArrayCollection;
		[Bindable]
		private var arSplitTotal:Number = Number("0.00");		// This is the sum of the Split Amount

		private var acctType:int;				// Account type for new items;
		private var popAccts:popUpAccounts;

		private function popUpInit():void
		{
			var i:int;

			PopUpManager.centerPopUp(this);
			//TW: 2.5.3 Is it locked?
			if(r_Class.fBitLocked) {
				this.currentState = 'StateLocked';
			} else {
				this.currentState = '';
			}
			
			// Set up Remote calls
       		registerItemCFC.destination="ColdFusion";
			registerItemCFC.source = dsn + "CFC.RegisterItemDAO";
			registerItemCFC.endpoint = endPoint;
			
			initMembers(r_Class.EntityID);					// This sets the members and select the Combo SelectedItem
			// Set up debit/credit labels			
			setGridLabels(r_Class.GL_AccountTypeID);		// Setup correct Debit/Credit labels based on AccountTypeID
			
			//Set the Proforma checkbox    		
			chkBxProforma.visible = (isCash == "Y") ? true : false;  			
			boolProforma = r_Class.bitIsProforma;

			//if this is not a Member Dues Account - Disable the member select pulldown
			if (r_Class.GL_AccountID == duesAccount) 
			{
				cbEntity.visible = true;

			}
			else
			{
				cbEntity.visible = false;
			}	    		
   			arSplitItems = new ArrayCollection;		
			if(fEdit) {											// Editing existing entry
				// this is an existing entry, so it should have the corresponding split information
				if(r_Class.Credit != 0) 
				{
					selCredit.selected = true;
					selDebit.selected = false;
					fCredit = true;
				}
				else 
				{												
					selCredit.selected = false;
					selDebit.selected = true;
					fCredit = false;
					}
				refNum = r_Class.RefNum;
				acctDescript = r_Class.Description;
				acctMemo = r_Class.Memo;
				dRegDate.selectedDate = r_Class.dRegDate;
				dDueDate.selectedDate = r_Class.dDueDate;
				SplitLookup();								//CALL ColdFusion RegisterItemDAO.Lookup
			}
			else
			{	
				// this is a new entry - creat the first entry
				AddSplitItem(false);						// false -- don't reposition to split item
				txtRefnum.setFocus();
				dRegDate.selectedDate = Today;				// Set by Accounts -- may not be today if user changed
				dDueDate.selectedDate = Today;
//				dRegDate.selectedDate = new Date();
//				dDueDate.selectedDate = new Date();
				selDebit.selected = true;					// if the values were passed back from AccountType
				selCredit.selected = false;					// here is where we could set the default credit/debit selection
				fCredit = true;
			}
			dgSplitItems.invalidateList();
		}

		private function setGridLabels(GL_AccountTypeID:int):void 
		{
			var ar:ArrayCollection;
			var i:int, len:int;
			
			i = GL_AccountTypeID - 1, 0 ;		//type is base 0 -- adjust!
			if (i < 0) i = 0;
			
			ar = this.parentApplication.acctLabel;
			selDebit.label = ar[i].DebitLabel;
			selCredit.label = ar[i].CreditLabel;
			if (ar[i].IsDueDate) { 				// only on Liabilities(6) or Receivables(7)
				dDueDate.visible = true;
				lblDueDate.visible = true;
				}
			else {
				dDueDate.visible = false;
				lblDueDate.visible = false;
				}
		}
				
		// Calc Total Amount
		// 8/11/09 - Rounding error -- so added logic to round.
		public function TotalAmount():void 
		{
			var i:int, s:String, len:int, tmpnum: Number, tmpint: int, totalint:int

			len = arSplitItems.length;
			totalint = 0;
			for(i=0; i<len; i++) 
			{
				if (!arSplitItems[i].dFlag) 
				{
					// Remove any commas in number so Number() works
					s = arSplitItems[i].Amount;
					arSplitItems[i].Amount = s.replace(",", "");
					tmpnum = Number(arSplitItems[i].Amount);
					tmpint = tmpnum * 100.0000001;			// Don't ask -- total BS that this POS can't round correctly
					totalint = totalint + tmpint;
				}	
			}
			arSplitTotal = totalint/100.00;
//			dgSplitItems.invalidateList();
		}

/* -----------------------------------------------------------------------------------------
	Register Values Changed 
------------------------------------------------------------------------------------------ */

		//	changeAmt changed.
		private function changeAmt():void
		{
			btnSave.enabled = true;
		}
		
		// DateChanged
		private function DateChange():void
		{
			r_Class.dRegDate = dRegDate.selectedDate;
			this.parentApplication.Today = dRegDate.selectedDate;
			btnSave.enabled = true;
		}
		
		// DueDate Changed
		private function DueDateChange():void
		{
			r_Class.dDueDate = dDueDate.selectedDate;
			btnSave.enabled = true;
		}

		// setDescription - event from Description field
		private function setDescription(e:Event):void
		{
			btnSave.enabled = true;
			if(arSplitItems.length == 0)		// No items ??
			{
				AddSplitItem(true);				// reposition to split
				arSplitItems[0].Description = txtDescription.text;
				dgSplitItems.invalidateList();
			}
			else if(arSplitItems.length == 1)		// First Item
			{
				arSplitItems[0].Description = txtDescription.text;
				dgSplitItems.invalidateList();
			}
			btnSave.enabled = true;			
		}
		
		// setMemo	 validCommit - event from memo field
		private function setMemo(e:Event):void
		{
			if(arSplitItems.length == 0)		// No items ??
			{
				AddSplitItem(true);				//reposition to split
				arSplitItems[0].Memo = txtDescription.text;
				dgSplitItems.invalidateList();
			}
			else if(arSplitItems.length == 1)		// First Item
			{
				arSplitItems[0].Memo = txtMemo.text;
				dgSplitItems.invalidateList();
			}
			btnSave.enabled = true;
		}

		//	checkbox Proforma 
		private function selProforma():void
		{
			boolProforma = chkBxProforma.selected;
			btnSave.enabled = true;
		}

		// Here after save completess
		private function closeEvent(e:Event):void
		{
			removeDetail();
		}

		private function removeDetail():void
		{
			this.parentApplication.btnNewItem.enabled = true;			// Re-enable New, was disabled when this called
			PopUpManager.removePopUp(this);
		}

/* -----------------------------------------------------------------------------------------
	SplitItems Event Handlers  
------------------------------------------------------------------------------------------ */
		
			// single Click SplitItem
		private function clkSplitItem(e:Event):void
		{
			TotalAmount();
		}	
		private function checkEdit(e:DataGridEvent):void
		{
			var n:int;
			
			if(e.columnIndex == 2)
			{
				e.preventDefault();
				popAccts = popUpAccounts(PopUpManager.createPopUp(this, popUpAccounts, true));
				popAccts.puAcct = accts;
				popAccts.callBack = AcctData;
			}
				
			// Local function to handle callback
			function AcctData(x:XML):void
			{
				var atype:int;
				var acctID:int;
				var acctNM:String;
			
				acctNM = x.@Label;
				acctID = x.@ID;
				atype = x.@GL_AccountTypeID;
				acctType = atype;
				arSplitItems[e.rowIndex].GL_AccountID = acctID;
				arSplitItems[e.rowIndex].GL_Account = acctNM;
				dgSplitItems.editedItemPosition = {rowIndex: e.rowIndex, columnIndex: 3};
				dgSplitItems.invalidateList();
			}

			btnSave.enabled = true;
			btnDelete.enabled = true;
		}

		// btnAdd [Add Item] SplitItem  f=TRUE- reposition to editedItemPosition, f=FALSE-new item, stay at refNum
		private function AddSplitItem(f:Boolean):void
		{
			var temp:Object = new Object();

			temp = (
			{ 	RegisterID: r_Class.RegisterID,
				RegisterItemID: 0,					// 0 for Insert
				dFlag: false,
				GL_Account: "",
				GL_AccountID: 0,
				Description: "",
				Memo: " ",
				Debit: 0.00,				
				Credit: 0.00,
				Amount: 0.00
			});
			arSplitItems.addItem(temp);
       		dgSplitItems.scrollToIndex(arSplitItems.length-1);
       		if (f) {
//Alert.show("repo to c=0");       			
				dgSplitItems.editedItemPosition = {rowIndex: arSplitItems.length-1, columnIndex: 0};
       		}
		}

		//	btnDelete [Delete Item]
		private function delSplitItem():void
		{
			var i:int, n:int, len:int; 

			n = dgSplitItems.selectedIndex;
			arSplitItems[n].dFlag = true;
			if (arSplitItems.length == 0)					// If not grid items, disable delete
				btnDelete.enabled = false;
			TotalAmount();
			arSplitItems.refresh();
		}

		//	btnSaveItem [SAVE] - click ave modified register item
		private function saveItem():void
		{
			var i:int, n:int;
			var len:int;
			var args:Register;
			var dataString:String;
    		var si:Array; 
    		var sp:Array;
    		var amtType:String;
    		var ri_Class:RegisterItemDAO;
    		var _RegisterItem:Array;
    		
			TotalAmount();									// Sum it one last time
    		amtType = String(amt1.selection.id);			// read the selected Credit/Debit radio from the popUp
    		
			r_Class.Description = txtDescription.text;
			r_Class.Memo = txtMemo.text;
			r_Class.RefNum = txtRefnum.text;
			r_Class.bitIsProforma = boolProforma;
			r_Class.bitIsSplit = true;
			r_Class.addEventListener(Event.CLOSE, closeEvent);
			
			args = r_Class.RmtRegister;
			args.RegDate = dateFormat.format(dRegDate.selectedDate);
			args.DueDate = dateFormat.format(dDueDate.selectedDate);
			if(amtType == "selDebit") 
			{							 					// Debit
				args.Debit = arSplitTotal;					// Reverse for Register
				args.Credit = 0;
			}
			else 
			{
				args.Debit = 0;								// Reverse for Register
				args.Credit = arSplitTotal;
			}
						
			_RegisterItem = new Array();					// Create the place holder
			arSplitItems.filterFunction=removeFilter;		// Install filter for dFlag
			arSplitItems.refresh();							
			
			len = arSplitItems.length;
			for(i=0; i<len; i++) 
			{
				if (arSplitItems[i].GL_AccountID != 0)		//2/26 change
				{  
					_RegisterItem.RegisterID 		= arSplitItems[i].RegisterID;  
					_RegisterItem.RegisterItemID 	= arSplitItems[i].RegisterItemID;  
					_RegisterItem.dFlag 			= arSplitItems[i].dFlag;  
					_RegisterItem.EntityID 			= arSplitItems[i].EntityID;  
					_RegisterItem.GL_Account 		= arSplitItems[i].GL_Account;  
					_RegisterItem.GL_AccountID 		= arSplitItems[i].GL_AccountID;  
					_RegisterItem.Description 		= arSplitItems[i].Description;  
					_RegisterItem.Memo 				= arSplitItems[i].Memo;  
					if(amtType == "selDebit") 
					{ 					
						_RegisterItem.Debit 		= 0.00;  
						_RegisterItem.Credit 		= arSplitItems[i].Amount;  
					}
					else
					{
						_RegisterItem.Debit 		= arSplitItems[i].Amount;  
						_RegisterItem.Credit 		= 0.00;  
					}
				}	
				else
				{
					n = i + 1;	
					Alert.show("Please select an GL Account for item " + n + ": " + arSplitItems[i].Description);
					return;
				}		
				ri_Class = new RegisterItemDAO( _RegisterItem );
				args.RegisterItems.push( ri_Class );
			}
   			this.parentApplication.SaveQ(args, false);				// Save the Results - Call the SaveQ function
			this.parentApplication.btnNewItem.enabled = true;		// Re-enable New, was disabled when this called
			PopUpManager.removePopUp(this);
		}

/* -----------------------------------------------------------------------------------------
	CFC Event Handlers and Support Functions
------------------------------------------------------------------------------------------ */

		// Lookups the RegisterItems associated with the Register Clicked //
		public function SplitLookup():void 
		{
			var args:Object = {RegisterID:0, EntityID:0};
			 
			args.RegisterID = r_Class.RegisterID;
    		args.EntityID = r_Class.EntityID;
    		registerItemCFC.Lookup(args);									// Retrieve the RegisterItems 
		}
		
		//	registerItemCFCHandler - called to fill popUpGrid
		private function registerItemCFCHandler(e:ResultEvent):void
		{

			var rmtMsg:RemotingMessage;
    		var msgOp:String;
    		var id:int;
    		var ac:ArrayCollection;
    		var i:int, len:int;
    		
			rmtMsg = e.token.message as RemotingMessage;
    		msgOp = rmtMsg.operation;
			
    		if(msgOp == "Create") 
    		{
				r_Class.RegisterID = e.result as int;
				this.parentApplication.arRegister.push(r_Class);			
    		}
    	
			if(msgOp == "SaveQ" || msgOp == "SaveQ2") 
			{
    			this.parentApplication.listRegister();		// Force refresh
    			removeDetail();		// All done Exit
    		}
    	
			if(msgOp == "Lookup") 
			{

    			arSplitItems = e.result as ArrayCollection;	// Get data
				arSplitItems.filterFunction=processFilter;	// Install filter for dFlag
				setAmount();								// Set (create) the Amount field from Debit/Credit returned
				TotalAmount();								// Calculate SplitTotals			
    		}
    		dispatchEvent(new Event(Event.COMPLETE));		
		}
		
		// setAmount - creates the Amount field in the arSplitItems arraycollection
		public function setAmount():void 
		{
			var i:int, len:int;

			len = arSplitItems.length;
			for(i=0; i<len; i++) 
			{
				if (fCredit) 
					arSplitItems[i].Amount = Number(arSplitItems[i].Debit);
				else 
					arSplitItems[i].Amount = Number(arSplitItems[i].Credit);
			}
		}		
   		// Filter function 
   		public function processFilter(item:Object):Boolean
   		{
      		var result:Boolean=false;

	      // If item is not deleted 
    	  if (!item.dFlag)
        	 result=true;
      	return result;
	   }
   		public function removeFilter(item:Object):Boolean
   		{
      		var result:Boolean=true;

      	return result;
	   }

		private function CFCerror(e:FaultEvent):void
		{
			Alert.show(e.fault.faultString, "Server Error");
		}

		public function processEdit(event:DataGridEvent):void 
		{       
			var keyName:int;                 // the primary key for the record
			var column:String;               // the field being edited
			var cellValue:String;            // the new value for the field being edited
			var prevCellValue:String = '';   

   			if(event.reason == DataGridEventReason.CANCELLED)	// If user canceled, return
  				return; 
			if (event.columnIndex == 3)   						// Only validate the Amount column
			{
   				cellValue = TextInput(event.currentTarget.itemEditorInstance).text;
				column = event.dataField;
				keyName = dgSplitItems.selectedItem.ID;                                                        
				prevCellValue = dgSplitItems.selectedItem[event.dataField];
   	
				if ( prevCellValue == cellValue) 
				{
   					return;
   				}
				cellValue = cellValue.replace(",", "");
				if (isNaN(Number(cellValue)) || cellValue == "") 
				{
					event.preventDefault();
					Alert.show("Please re-entered a valid number");
   					return;           
				}
			}
		}
		
/* -----------------------------------------------------------------------------------------
	GRID Functions
------------------------------------------------------------------------------------------ */

		private function itemUpdate():void 
		{
			TotalAmount();
			arSplitItems.refresh()
		}

		// The code formats the Amount field
		private function FormatAmount(item:Object, column:DataGridColumn):String 
		{
			var s:String;
			var returnValue:String 
			
			s = item.Amount;
			s = s.replace(",", "");
			returnValue = setCurrencyFormat.format(s);
			TotalAmount();
			return returnValue;
		}
  
        private function initMembers(UserID:int):void
        {
        	var i:int, len:int;
        	var selected:String; 

//trace("UserID=" + UserID);
          	_members = (new XMLListCollection(this.parentApplication.xmlMembers.member)).toArray();
			          	
          	len = _members.length;
//trace("len=" + len);
            for (i=0; i<len; i++)
            {
            	selected = _members[i].@value;
//trace("selected=" + selected);
               if(Number(selected) > 0)
               {
                  	if(Number(selected) == UserID)
                  	{
						cbEntity.selectedIndex = i;
                     	break;
                  	}
               }
            }
        }
		
         // Display a selected item's label field and index for change events.
         private function changeEvt(event:Event):void 
         {
         	var i:int, UserID:int, sUserID:String;
         	
         	i = cbEntity.selectedIndex;				// Get the current index
         	sUserID = _members[i].@value;			// Find the members UserID (value=)
         	UserID = Number(sUserID);
//trace("UserID=" + sUserID);
			if (r_Class.EntityID > 0 && r_Class.EntityID != UserID)
			{
				r_Class.EntityID = UserID;
				Alert.show("Warning: You have changed the Member this item was originally associated with.");
			}                
         }		
		
	]]>
</mx:Script>
	<mx:CurrencyFormatter id="setCurrencyFormat" precision="2" rounding="none" decimalSeparatorTo="." 
		thousandsSeparatorTo="," thousandsSeparatorFrom="" useThousandsSeparator="true" useNegativeSign="true" currencySymbol="" alignSymbol="left"/>
	<mx:NumberFormatter id="setNumberFormat" useThousandsSeparator="true" thousandsSeparatorTo=","/>
	<mx:DateFormatter id="dateFormat" formatString="MM/DD/YYYY"/> 
	
	<mx:Label x="39" y="93" text="Date:" textAlign="right"/>
	<mx:Label x="17" y="153" text="Ref Num:" textAlign="right"/>
	<mx:Label x="6" y="10" text="Description:" textAlign="right"/>
	<mx:DateField x="94" y="91" id="dRegDate" change="DateChange()" width="105"/>
	<mx:DateField x="94" y="119" id="dDueDate" change="DueDateChange()" width="105"/>
	<mx:TextInput x="94" y="151" id="txtRefnum" width="89" maxChars="10" text="{refNum}" />
	<mx:TextInput x="94" y="8" id="txtDescription" maxChars="50" valueCommit="setDescription(event)" width="350" text="{acctDescript}" />
	<mx:TextInput x="94" y="36" id="txtMemo" valueCommit="setMemo(event)" maxChars="50" width="350" text="{acctMemo}" />
	<mx:RadioButtonGroup id="amt1"/>
	<mx:RadioButton x="10" label="Debit" groupName="amt1" y="192" id="selDebit" selected="true" click="changeAmt()" />
	<mx:RadioButton x="94" label="Credit" groupName="amt1" y="192" id="selCredit" click="changeAmt()" />
	<mx:DataGrid x="207" y="77" width="623" height="228" id="dgSplitItems" 
		itemClick="clkSplitItem(event)" itemEditBeginning="checkEdit(event)"   
		dataProvider="{arSplitItems}"  editable="true"  change="itemUpdate()" alternatingItemColors="[#F7F7F7, #E1DFDF]" >
		<mx:columns>
			<mx:DataGridColumn headerText="Item Description" width="200" dataField="Description"/>
			<mx:DataGridColumn headerText="Memo" dataField="Memo"/>
			<mx:DataGridColumn headerText="Account" dataField="GL_Account"/>
			<mx:DataGridColumn headerText="Amount" id="Amount" width="115" textAlign="right" dataField="Amount" paddingRight="15" labelFunction="FormatAmount"   />
		</mx:columns>
	</mx:DataGrid>
	<mx:Button x="721" y="38" label="Delete Item" id="btnDelete" width="109" click="delSplitItem()" enabled="false" fontSize="10"/>
	<mx:Button x="604" y="38" label="Add Item" id="btnAdd" width="109" click="AddSplitItem(true)" enabled="true" fontSize="10"/>
	<mx:Text x="578" y="313" id="dgLength" width="40" textAlign="left" text="{dgSplitItems.dataProvider.length}"   height="18"/>
	<mx:Text x="715" y="313" id="txBalance" width="115" textAlign="right" paddingRight="5"  text="{setCurrencyFormat.format(arSplitTotal)}"   height="20" fontWeight="bold"/>
	<mx:Label x="517" y="313" text="Items:" width="53"/>
	<mx:Label x="666" y="313" text="Total:"/>
	<mx:Label x="10" y="121" text="Due Date:" id="lblDueDate"/>
	<mx:Label x="39" y="38" text="Memo:" textAlign="right"/>
    <mx:CheckBox x="94" y="247" label="Proforma" selected="{boolProforma}" id="chkBxProforma" click="selProforma()" />
    <mx:ComboBox x="452" y="7" width="378" id="cbEntity" dataProvider="{_members}" labelField="@name" prompt="Select member" change="changeEvt(event)"  />
    <mx:ControlBar horizontalAlign="center">
        <mx:Button label="Save Journal Entry" id="btnSave" width="159" click="saveItem()" enabled="false" fontSize="12"/>
        <mx:Button label="Cancel" fontWeight="normal" click="closeEvent(event)" id="button1"/>
    </mx:ControlBar>
</mx:TitleWindow>
